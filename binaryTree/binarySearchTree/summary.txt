https://labuladong.online/algo/essential-technique/binary-tree-summary-2/
https://labuladong.online/algo/data-structure/binary-tree-part1/
https://labuladong.online/algo/data-structure/binary-tree-part2/
https://labuladong.online/algo/data-structure/bst-part2/ -- 高频面经题

本文来实现 BST 的基础操作：判断 BST 的合法性、增、删、查。其中「删」和「判断合法性」略微复杂。

BST 的基础操作主要依赖「左小右大」的特性，可以在二叉树中做类似二分搜索的操作，寻找一个元素的效率很高。比如下面这就是一棵合法的二叉树：

对于 BST 相关的问题，你可能会经常看到类似下面这样的代码逻辑：
def BST(root: TreeNode, target: int) -> None:
    if root.val == target:
        # 找到目标，做点什么
    if root.val < target:
        BST(root.right, target)
    if root.val > target:
        BST(root.left, target)
